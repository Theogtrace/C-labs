Script started on Thu 19 Apr 2018 12:07:41 PM EDT
[?1034hbash-4.1$ date
Thu Apr 19 12:07:43 EDT 2018
bash-4.1$ uname -a 
Linux Zeus-2 2.6.32-696.18.7.el6.centos.plus.x86_64 #1 SMP Tue Jan 9 14:11:50 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
bash-4.1$ ls
lab10.c  lab10Typescript_sarshad4_208  Makefile
bash-4.1$ cat 10.c[K[K[K[Klab10c[K.c
/*
 * 	Saad Arshad 00857432
 * 	CS 262 Section 208
 * 	lab 10
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define BSIZE 100
#define NAME_SIZE 25

typedef struct _Item
{
	char name[NAME_SIZE];
	size_t quantity;
	double price;
}Item;

Item *createItems(int size)
{
	Item *item = NULL;
	item = (Item*)malloc(size*sizeof(Item));
	if(item == NULL)
	{
		printf("Error with malloc in createItems!\n");
		exit(1);	
	}
	for(int i = 0; i < size; i++)
	{
		item[i].name[0] = '\0';
		item[i].quantity = 0;
		item[i].price = 0.0;
	}
	return item;
}

int getPrintMenu(char[]);
void addItem(Item [],int , char[]);

int main()
{
	Item *data;

	int x = 0;
	int choice;
	char Buffer[BSIZE];
	int size = 0;
	int count = 0;
	int d = 0;
	

	printf("How many items would you like in your shopping card?\n");
	fgets(Buffer, BSIZE, stdin);
	sscanf(Buffer, "%d", &size);

	data = createItems(size);

	while(x != 3)
	{
		choice = getPrintMenu(Buffer);
		switch(choice)
		{
			case 1:
				d++;
				if(d > size)
				{	
					Item *blankA = data;
					data = createItems(size*2);
					memcpy(data, blankA, sizeof(Item)*size);
				}
				addItem(data, count, Buffer);
				count++;
				break;
			case 2:
				for(int i = 0; i < count; i++)
				{
					printf("Name: %s", data[i].name);
					printf("Quantity: %lu\n", data[i].quantity);
					printf("Price: %lf\n", data[i].price);		
				}
				break;
			case 3:
				printf("Quiting the program!\n");
				free(data);
				x = 3;
				break;
	
			default:
				printf("invalid input.\n");
				break;
		}
	}

}

int getPrintMenu(char Buffer[])
{
	int choice = 0;
	
	printf("\nAdd an Item to the Shopping Cart!\n");
	printf("Print the current list of Items.\n");
	printf("Quit the program\n");
	
	fgets(Buffer, BSIZE, stdin);
	sscanf(Buffer, "%d", &choice);
	return choice;
}

void addItem(Item *data, int count, char Buffer[])
{
	printf("What is the name of the item?\n");	
	fgets(data[count].name, NAME_SIZE, stdin);
	//strcpy(nameArray, Buffer);

	printf("What is the Quantitny of the item?\n");
	fgets(Buffer, BSIZE, stdin);
	sscanf(Buffer, "%lu", &data[count].quantity);	

	printf("What is the price of the item?\n");
	fgets(Buffer, BSIZE, stdin);
	sscanf(Buffer, "%lf", &data[count].price);

	/*strcpy(data[count].name, nameArray);
	data[count].quantity = x;
	data[count].price = y;	*/

}
bash-4.1$ can [K[Kt m[KMakefile 
# A simple Makefile
# # Saad Arshad 00857432
# # CS 262, Lab Section 208
# # Lab 10

CC = gcc
CFLAGS = -g -Wall -pedantic-errors

TARGET1 = lab10

all: $(TARGET1)

$(TARGET1):
	$(CC) $(CFLAGS) -o $(TARGET1) $(TARGET1).c

clean:
	rm $(TARGET1)

bash-4.1$ ls
lab10.c  lab10Typescript_sarshad4_208  Makefile
bash-4.1$ valgrind --leak-check=[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kmake
gcc -g -Wall -pedantic-errors -o lab10 lab10.c
bash-4.1$ ls
lab10  lab10.c	lab10Typescript_sarshad4_208  Makefile
bash-4.1$ valgrind--leak-check=yes lab10
bash: valgrind--leak-check=yes: command not found
bash-4.1$ valgrind --leak-check=yes lab10
==11599== Memcheck, a memory error detector
==11599== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11599== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==11599== Command: lab10
==11599== 
How many items would you like in your shopping card?
2

Add an Item to the Shopping Cart!
Print the current list of Items.
Quit the program
1
What is the name of the item?
apple
What is the Quantitny of the item?
2
What is the price of the item?
13

Add an Item to the Shopping Cart!
Print the current list of Items.
Quit the program
ba  1
What is the name of the item?
banana
What is the Quantitny of the item?
4
What is the price of the item?
12

Add an Item to the Shopping Cart!
Print the current list of Items.
Quit the program
2
Name: apple
Quantity: 2
Price: 13.000000
Name: banana
Quantity: 4
Price: 12.000000

Add an Item to the Shopping Cart!
Print the current list of Items.
Quit the program
1
What is the name of the item?
cherry
What is the Quantitny of the item?
8
What is the price of the item?
19

Add an Item to the Shopping Cart!
Print the current list of Items.
Quit the program
2
Name: apple
Quantity: 2
Price: 13.000000
Name: banana
Quantity: 4
Price: 12.000000
Name: cherry
Quantity: 8
Price: 19.000000

Add an Item to the Shopping Cart!
Print the current list of Items.
Quit the program
3
Quiting the program!
==11599== 
==11599== HEAP SUMMARY:
==11599==     in use at exit: 96 bytes in 1 blocks
==11599==   total heap usage: 2 allocs, 1 frees, 288 bytes allocated
==11599== 
==11599== 96 bytes in 1 blocks are definitely lost in loss record 1 of 1
==11599==    at 0x4A08178: malloc (vg_replace_malloc.c:298)
==11599==    by 0x4007B3: createItems (lab10.c:26)
==11599==    by 0x4008D4: main (lab10.c:60)
==11599== 
==11599== LEAK SUMMARY:
==11599==    definitely lost: 96 bytes in 1 blocks
==11599==    indirectly lost: 0 bytes in 0 blocks
==11599==      possibly lost: 0 bytes in 0 blocks
==11599==    still reachable: 0 bytes in 0 blocks
==11599==         suppressed: 0 bytes in 0 blocks
==11599== 
==11599== For counts of detected and suppressed errors, rerun with: -v
==11599== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)
bash-4.1$ ls
lab10  lab10.c	lab10Typescript_sarshad4_208  Makefile
bash-4.1$ make clean
rm lab10
bash-4.1$ exit

Script done on Thu 19 Apr 2018 12:10:03 PM EDT
